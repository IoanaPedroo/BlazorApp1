@inject ISyncLocalStorageService LocalStorage
@inject ICartService CartService
@inject IProductService ProductService
@implements IDisposable
@inject NavigationManager NavigationManager

<BlazoredTypeahead SearchMethod="@SearchProduct"
    TValue="Product"
    TItem="Product"
    Value="selectedPoduct"
    ValueChanged="HandleSearch"
    ValueExpression="@(() => selectedPoduct)"
    placeholder = "Search...">
    <SelectedTemplate>
        @context.Title
    </SelectedTemplate>
    <ResultTemplate>
        @context.Title
    </ResultTemplate>
    <NotFoundTemplate>
        Sorry, there weren't any products find
    </NotFoundTemplate>
</BlazoredTypeahead>
<a href="cart" class="btn btn-info">
    <i class="oi oi-cart"></i>
    Cart
    <span class="badge badge-pill badge-light">@GetProductCount()</span>
</a>

@code {
    Product selectedPoduct;

    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
    }

    private int GetProductCount()
    {
        var cart = LocalStorage.GetItem<List<ProductVariant>>("cart");
        return cart != null ? cart.Count : 0; 
    }

    private async Task<IEnumerable<Product>> SearchProduct(string searchText)
    {
        var response = await ProductService.SearchProduct(searchText);
        return response;
    }

    private void HandleSearch(Product product)
    {
        if (product == null) return;
        selectedPoduct = product;
        NavigationManager.NavigateTo($"product/{selectedPoduct.Id}");
    }
}
